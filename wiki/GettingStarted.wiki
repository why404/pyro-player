*Getting ready to use Pyro in various contexts.* 

You can use pyro in a few different contexts lets examine which ones and how to set up pyro so that you dont get errors popping everywhere. 


Ok, it doesnt matter if your using FlexBuilder, Eclipse, the Flash IDE itself, Flash Develop or TextMate, or a combination of the Flash IDE and external files, pyro works the same.
  
First, start by either checking out the SVN version, or by downloading the package, that sure will help a lot ;).
 
Now, set up your classpath references so that you can import our ca.turbulent.media package easily. 

Also, I'd like to mention that you will absolutely need to know how to code Actionscript, and AS3 more specifically. If you dont know how to code AS3 and don't have a clue of what I'm taling about in the following explanations, use another flash video player such as JW. I'm not here to show anyone how to code or setup AS projects. Not that I'm elitist in anyways, I just didnt build Pyro in the purpose of showing how actionscript works.

<p><p>
*1) Flash IDE - actionscript AS3 projects*
This easily covers more than 80 percent of pyro usage. Its the most sought after use for a class like this one.

I will first demonstrate how to use a Pyro.as class instance inside your classes. (I will later down the road set up an exemple where I extend the Pyro class instead).

I will be building a small class named PyroExemple (as a flash.display.Sprite extension) just as a theoric exemple.

So without further adue, here it goes:

{{{
package
{
   import ca.turbulent.media.Pyro;
   import flash.display.Sprite;

   public class PyroExemple extends Sprite
   {
      public var pyroInstance:Pyro;

      public function PyroExemple()
      {
         pyroInstance = new Pyro(640, 480);
         addChild(pyroInstance);
      }

      public function playVideoURL(url:String):void
      {
         pyroInstance.play(url);
      }

   }
}
}}}

Thats pretty much it for starters... That was easy wasn't it ? :) So in order to load a new video file into your project, call the playVideoURL with the targetted url as param. All it does is call pyro's omnipotent play method with the url. Now there is a lot more to Pyro, but this just the getting started section, and we've done just that. 

If all you are doing is pure actionscript/flash projects without doing any Flex or using 3D frameworks (or other weird tentacular frameworks) you might want to skip whats coming up and keep on reading other pages of the wiki. 

   

  
*2) Using Pyro in flex*
Now for Flex, there is quite a few ways you could integrate Pyro, however, I recommend wrapping a component around your Pyro instance. Here is how I would code such a thing, lets call it our PyroML.mxml component:

{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:UIComponent xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="insertPyroInstance()">
	
	<mx:Script>
		<![CDATA[
		
			import ca.turbulent.media.Pyro;
			import ca.turbulent.media.events.PyroEvent;
			
			public var pyro	:Pyro;
			
			public function insertPyroInstance(e:*=null):void
			{
				pyro = new Pyro(width, height);
				pyro.killOnRemoval = false;
				this.addChild(pyro);
			}	
			
		]]>
	</mx:Script>
	
</mx:UIComponent>
}}}

Notice the usage of pyro property *killOnRemoval*. This is particularly usefulll if you use states a lot. If this property is left to its default true value, you will end up killing your pyro instance everytime you leave a state that embeds a PyroML in its hierarchy. I strongly recommend setting *pyroInstance.killOnRemoval=false* whenever ypur dealing with Flex integration.    



*3) Using a pyro instance as material in 3D frameworks such as Away3D or Papervision*
Well, I'm not going to show you how to build video materials for 3d frameworks, that has been covered plenty of times on many forums. Considerating Pyro is a flash.display.Sprite extension should be enough for anyone with proper knowledge of how materials work to know what to do here. 

What you will need to know about here is the stageEventMechanics Pyro property. Pyro has stage listeners set up here and there, and if if left in action, will probably cause a major crash at runtime or even worst, at compile time. Luckily, this is easy to bypass and here is how to do it. 

Pyro's constructor holds a secret 3rd parameter that toggles stage listeners on and off, so on instanciation do the following:

{{{ pyroInstance = new Pyro(640, 480, Pyro.STAGE_EVENTS_MECHANICS_ALL_OFF); }}}   

Voil√†, you should have a Pyro instance set as a material and rendering properly in a 3d environment. 
 


  
    